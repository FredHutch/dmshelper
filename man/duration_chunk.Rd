% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/06_repository.R
\name{duration_chunk}
\alias{duration_chunk}
\title{#' Title
#'
#' @param input
#'
#' @return
#' @export
#'
#' @examples
findable_chunk <- function(input) {
if (determine_cores(input)$antibody_tech_flag) {
#####
findable_chunk_temp <-
c(yaml.load_file("template/antibody_tech.yml")$findable)
} else {
findable_chunk_temp <- c("")
}
if (determine_cores(input)$cell_img_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/cell_img.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$em_tem_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/em_tem.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$em_sem_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/em_sem.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$em_cryo_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/em_cryo.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$eh_aperio_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/eh_aperio.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$eh_polaris_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/eh_polaris.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$eh_vectra_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/eh_vectra.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$flow_cytometry_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/flow_cytometry.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$genomics_flag) {
#####
if (input$human_subjects) {
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/genomics.yml")$findable)
} else {
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/genomics.yml")$findable)
}
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$immune_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/immune.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$large_animal_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/large_animal.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$pi_ivis_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/pi_ivis.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$pi_microct_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/pi_microct.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$pi_mri_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/pi_mri.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$preclinical_model_flag) {
#####
findable_chunk_temp <-
c(
findable_chunk_temp,
yaml.load_file("template/preclinical_model.yml")$findable
)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$proteomics_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/proteomics.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$small_animal_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/small_animal.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (determine_cores(input)$therapeutic_flag) {
#####
findable_chunk_temp <-
c(findable_chunk_temp,
yaml.load_file("template/therapeutic.yml")$findable)
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}
if (input$anvil) {
#####
findable_chunk_temp <-
yaml.load_file("template/anvil.yml")$findable_if_anvil
} else {
findable_chunk_temp <- c(findable_chunk_temp, "")
}}
\usage{
duration_chunk(input)
}
\arguments{
\item{input}{}
}
\description{
\subsection{Remove any duplicates}{

findable_chunk_temp <- unique(findable_chunk_temp)
}
}
\details{

}
